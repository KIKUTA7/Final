{"ast":null,"code":"var _jsxFileName = \"C:\\\\Beqa\\\\ProLan\\\\WDL\\\\KIU\\\\Final Project\\\\final\\\\src\\\\components\\\\DropdownCheckboxGroup.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropdownCheckboxGroup = _ref => {\n  _s();\n  let {\n    data,\n    selectedOptions,\n    placeholder,\n    setSelectedOptions,\n    onChange,\n    onSelect\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOverflow, setIsOverflow] = useState(false);\n  const ref = useRef(null);\n  const handleCheckboxChange = (event, manName) => {\n    const {\n      value,\n      checked\n    } = event.target;\n    setSelectedOptions(prevState => {\n      const updatedOptions = {\n        ...prevState\n      };\n      if (!updatedOptions[manName]) {\n        updatedOptions[manName] = [];\n      }\n      if (checked) {\n        if (!updatedOptions[manName].includes(value)) {\n          updatedOptions[manName].push(value);\n        }\n      } else {\n        updatedOptions[manName] = updatedOptions[manName].filter(option => option !== value);\n      }\n      return updatedOptions;\n    });\n  };\n  useEffect(() => {\n    const handleOutsideClick = event => {\n      if (ref.current && !ref.current.contains(event.target)) {\n        setIsOpen(false);\n      }\n    };\n    document.addEventListener(\"mousedown\", handleOutsideClick);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\n    };\n  }, []);\n  useEffect(() => {\n    if (ref.current) {\n      setIsOverflow(ref.current.scrollHeight > ref.current.clientHeight);\n    }\n  }, [isOpen]);\n  const handleClearSelection = () => {\n    setSelectedOptions({});\n    if (onChange) {\n      onChange({});\n    }\n  };\n  const selectedNamesString = Object.values(selectedOptions).flat().join(\", \").slice(0, 15);\n  const buttonText = Object.values(selectedOptions).flat().length > 0 ? selectedNamesString + (selectedNamesString.length < 15 ? \"\" : \"...\") : placeholder;\n  const arrowOrClearIcon = Object.values(selectedOptions).flat().length > 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: handleClearSelection,\n    className: \"clear-selection\",\n    children: \"X\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 7\n  }, this) : isOpen ? /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"arrow-icon\",\n    children: \"\\u25B2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"arrow-icon\",\n    children: \"\\u25BC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-checkbox-group\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(!isOpen),\n      children: [buttonText, arrowOrClearIcon]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dropdown-checkbox-list ${isOverflow ? \"scrollable\" : \"\"}`,\n      ref: ref,\n      children: Object.entries(data).map(_ref2 => {\n        let [manName, models] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"manufacturer-name\",\n            children: [manName, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"model-names\",\n            children: models.map(modelName => /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                value: modelName,\n                checked: selectedOptions[manName] ? selectedOptions[manName].includes(modelName) : false,\n                onChange: event => handleCheckboxChange(event, manName)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, this), modelName]\n            }, modelName, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this)]\n        }, manName, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(DropdownCheckboxGroup, \"6k7eG7UjN5Pq0eqBKr9UNcDYnGE=\");\n_c = DropdownCheckboxGroup;\nexport default DropdownCheckboxGroup;\nvar _c;\n$RefreshReg$(_c, \"DropdownCheckboxGroup\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","DropdownCheckboxGroup","_ref","_s","data","selectedOptions","placeholder","setSelectedOptions","onChange","onSelect","isOpen","setIsOpen","isOverflow","setIsOverflow","ref","handleCheckboxChange","event","manName","value","checked","target","prevState","updatedOptions","includes","push","filter","option","handleOutsideClick","current","contains","document","addEventListener","removeEventListener","scrollHeight","clientHeight","handleClearSelection","selectedNamesString","Object","values","flat","join","slice","buttonText","length","arrowOrClearIcon","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","entries","map","_ref2","models","modelName","type","_c","$RefreshReg$"],"sources":["C:/Beqa/ProLan/WDL/KIU/Final Project/final/src/components/DropdownCheckboxGroup.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\ninterface DropdownCheckboxGroupProps {\n  data: {\n    [key: string]: string[];\n  };\n  selectedOptions: { [key: string]: string[] };\n  placeholder: string;\n  setSelectedOptions: React.Dispatch<\n    React.SetStateAction<{ [key: string]: string[] }>\n  >;\n  onChange?: (selectedOptions: { [key: string]: string[] }) => void;\n  onSelect?: (selectedOptions: { [key: string]: string[] }) => void;\n}\n\nconst DropdownCheckboxGroup: React.FC<DropdownCheckboxGroupProps> = ({\n  data,\n  selectedOptions,\n  placeholder,\n  setSelectedOptions,\n  onChange,\n  onSelect,\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOverflow, setIsOverflow] = useState(false);\n  const ref = useRef<HTMLDivElement>(null);\n\n  const handleCheckboxChange = (\n    event: React.ChangeEvent<HTMLInputElement>,\n    manName: string\n  ) => {\n    const { value, checked } = event.target;\n\n    setSelectedOptions((prevState) => {\n      const updatedOptions = { ...prevState };\n\n      if (!updatedOptions[manName]) {\n        updatedOptions[manName] = [];\n      }\n\n      if (checked) {\n        if (!updatedOptions[manName].includes(value)) {\n          updatedOptions[manName].push(value);\n        }\n      } else {\n        updatedOptions[manName] = updatedOptions[manName].filter(\n          (option) => option !== value\n        );\n      }\n\n      return updatedOptions;\n    });\n  };\n\n  useEffect(() => {\n    const handleOutsideClick = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener(\"mousedown\", handleOutsideClick);\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleOutsideClick);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (ref.current) {\n      setIsOverflow(ref.current.scrollHeight > ref.current.clientHeight);\n    }\n  }, [isOpen]);\n\n  const handleClearSelection = () => {\n    setSelectedOptions({});\n\n    if (onChange) {\n      onChange({});\n    }\n  };\n\n  const selectedNamesString = Object.values(selectedOptions)\n    .flat()\n    .join(\", \")\n    .slice(0, 15);\n\n  const buttonText =\n    Object.values(selectedOptions).flat().length > 0\n      ? selectedNamesString + (selectedNamesString.length < 15 ? \"\" : \"...\")\n      : placeholder;\n\n  const arrowOrClearIcon =\n    Object.values(selectedOptions).flat().length > 0 ? (\n      <span onClick={handleClearSelection} className=\"clear-selection\">\n        X\n      </span>\n    ) : isOpen ? (\n      <span className=\"arrow-icon\">&#9650;</span>\n    ) : (\n      <span className=\"arrow-icon\">&#9660;</span>\n    );\n\n  return (\n    <div className=\"dropdown-checkbox-group\">\n      <button onClick={() => setIsOpen(!isOpen)}>\n        {buttonText}\n        {arrowOrClearIcon}\n      </button>\n\n      {isOpen && (\n        <div\n          className={`dropdown-checkbox-list ${isOverflow ? \"scrollable\" : \"\"}`}\n          ref={ref}\n        >\n          {Object.entries(data).map(([manName, models]) => (\n            <div key={manName}>\n              <div className=\"manufacturer-name\">{manName}:</div>\n              <div className=\"model-names\">\n                {models.map((modelName) => (\n                  <label key={modelName}>\n                    <input\n                      type=\"checkbox\"\n                      value={modelName}\n                      checked={\n                        selectedOptions[manName]\n                          ? selectedOptions[manName].includes(modelName)\n                          : false\n                      }\n                      onChange={(event) => handleCheckboxChange(event, manName)}\n                    />\n                    {modelName}\n                  </label>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DropdownCheckboxGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}