{"ast":null,"code":"var _jsxFileName = \"C:\\\\Beqa\\\\ProLan\\\\WDL\\\\KIU\\\\Final Project\\\\final\\\\src\\\\components\\\\DropdownCheckbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DropdownCheckbox = _ref => {\n  _s();\n  let {\n    options,\n    selectedOptions,\n    placeholder,\n    setSelectedOptions,\n    onChange,\n    onSelect\n  } = _ref;\n  const [isOpen, setIsOpen] = useState(false);\n  const [isOverflow, setIsOverflow] = useState(false); // Add state to track overflow\n  const ref = useRef(null);\n  const handleClickOutside = event => {\n    if (ref.current && !ref.current.contains(event.target)) {\n      setIsOpen(false);\n    }\n  };\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClickOutside, true);\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside, true);\n    };\n  }, []);\n  useEffect(() => {\n    if (ref.current) {\n      setIsOverflow(ref.current.scrollHeight > ref.current.clientHeight);\n    }\n  }, [isOpen]);\n  const handleCheckboxChange = event => {\n    const {\n      name\n    } = event.target;\n    setSelectedOptions(prevState => {\n      let nextState;\n      if (prevState.includes(name)) {\n        nextState = prevState.filter(item => item !== name);\n      } else {\n        nextState = [...prevState, name];\n      }\n      if (onChange) {\n        onChange(nextState);\n      }\n      if (onSelect) {\n        onSelect(nextState);\n      }\n      return nextState;\n    });\n  };\n  const handleClearSelection = () => {\n    setSelectedOptions([]);\n\n    // Call the optional onChange function\n    if (onChange) {\n      onChange([]);\n    }\n  };\n\n  // Generate a string with the names of selected checkboxes, limited to 15 characters.\n  let selectedNamesString = selectedOptions.join(\", \");\n  if (selectedNamesString.length > 15) {\n    selectedNamesString = `${selectedNamesString.substr(0, 15)}...`;\n  }\n\n  // Determine what text to display on the button\n  const buttonText = selectedOptions.length > 0 ? selectedNamesString : placeholder;\n\n  // Determine the arrow icon or clear icon based on the state\n  const arrowOrClearIcon = selectedOptions.length > 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n    onClick: handleClearSelection,\n    className: \"clear-selection\",\n    children: \"X\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 9\n  }, this) : isOpen ? /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"arrow-icon\",\n    children: \"\\u25B2\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"arrow-icon\",\n    children: \"\\u25BC\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown-checkbox\",\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(!isOpen),\n      children: [buttonText, arrowOrClearIcon]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dropdown-checkbox-list ${isOverflow ? \"scrollable\" : \"\"}`,\n      children: options.map((option, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"dropdown-checkbox-list-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: `checkbox-${index}`,\n          name: option,\n          checked: selectedOptions.includes(option),\n          onChange: handleCheckboxChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), option]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }, this);\n};\n_s(DropdownCheckbox, \"6k7eG7UjN5Pq0eqBKr9UNcDYnGE=\");\n_c = DropdownCheckbox;\nexport default DropdownCheckbox;\nvar _c;\n$RefreshReg$(_c, \"DropdownCheckbox\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","DropdownCheckbox","_ref","_s","options","selectedOptions","placeholder","setSelectedOptions","onChange","onSelect","isOpen","setIsOpen","isOverflow","setIsOverflow","ref","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","scrollHeight","clientHeight","handleCheckboxChange","name","prevState","nextState","includes","filter","item","handleClearSelection","selectedNamesString","join","length","substr","buttonText","arrowOrClearIcon","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","option","index","type","id","checked","_c","$RefreshReg$"],"sources":["C:/Beqa/ProLan/WDL/KIU/Final Project/final/src/components/DropdownCheckbox.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\n\ninterface DropdownCheckboxProps {\n  options: string[];\n  selectedOptions: string[];\n  placeholder: string;\n  setSelectedOptions: React.Dispatch<React.SetStateAction<string[]>>;\n  onChange?: (selectedOptions: string[]) => void;\n  onSelect?: (selectedOptions: string[]) => void; \n}\n\nconst DropdownCheckbox: React.FC<DropdownCheckboxProps> = ({\n  options,\n  selectedOptions,\n  placeholder,\n  setSelectedOptions,\n  onChange,\n  onSelect,\n}) => {\n\n    const [isOpen, setIsOpen] = useState(false);\n    const [isOverflow, setIsOverflow] = useState(false); // Add state to track overflow\n    const ref = useRef<HTMLDivElement>(null);\n  \n    const handleClickOutside = (event: MouseEvent) => {\n      if (ref.current && !ref.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n  \n    useEffect(() => {\n      document.addEventListener(\"click\", handleClickOutside, true);\n      return () => {\n        document.removeEventListener(\"click\", handleClickOutside, true);\n      };\n    }, []);\n  \n    useEffect(() => {\n      if (ref.current) {\n        setIsOverflow(ref.current.scrollHeight > ref.current.clientHeight);\n      }\n    }, [isOpen]);\n  \n    const handleCheckboxChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      const { name } = event.target;\n  \n      setSelectedOptions((prevState) => {\n        let nextState;\n        if (prevState.includes(name)) {\n          nextState = prevState.filter((item) => item !== name);\n        } else {\n          nextState = [...prevState, name];\n        }\n  \n        if (onChange) {\n          onChange(nextState);\n        }\n        if (onSelect) {\n          onSelect(nextState);\n        }\n  \n        return nextState;\n      });\n    };\n  \n    const handleClearSelection = () => {\n      setSelectedOptions([]);\n  \n      // Call the optional onChange function\n      if (onChange) {\n        onChange([]);\n      }\n    };\n  \n    // Generate a string with the names of selected checkboxes, limited to 15 characters.\n    let selectedNamesString = selectedOptions.join(\", \");\n    if (selectedNamesString.length > 15) {\n      selectedNamesString = `${selectedNamesString.substr(0, 15)}...`;\n    }\n  \n    // Determine what text to display on the button\n    const buttonText =\n      selectedOptions.length > 0 ? selectedNamesString : placeholder;\n  \n    // Determine the arrow icon or clear icon based on the state\n    const arrowOrClearIcon =\n      selectedOptions.length > 0 ? (\n        <span onClick={handleClearSelection} className=\"clear-selection\">\n          X\n        </span>\n      ) : isOpen ? (\n        <span className=\"arrow-icon\">&#9650;</span>\n      ) : (\n        <span className=\"arrow-icon\">&#9660;</span>\n      );\n  \n    return (\n      <div className=\"dropdown-checkbox\" ref={ref}>\n        <button onClick={() => setIsOpen(!isOpen)}>\n          {buttonText}\n          {arrowOrClearIcon}\n        </button>\n  \n        {isOpen && (\n          <div\n            className={`dropdown-checkbox-list ${isOverflow ? \"scrollable\" : \"\"}`}\n          >\n            {options.map((option, index) => (\n        <label key={index} className=\"dropdown-checkbox-list-item\">\n          <input\n            type=\"checkbox\"\n            id={`checkbox-${index}`}\n            name={option}\n            checked={selectedOptions.includes(option)}\n            onChange={handleCheckboxChange}\n          />\n          {option}\n        </label>\n      ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  export default DropdownCheckbox;\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}